// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvcTest.Models;

namespace mvcTest.Migrations
{
    [DbContext(typeof(YourDirContext))]
    [Migration("20200418002603_addingIdentity")]
    partial class addingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("mvcTest.Models.Activationtable", b =>
                {
                    b.Property<int>("ActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("date");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ActivationId");

                    b.HasIndex("ShopId");

                    b.ToTable("activationtable","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .HasColumnName("bannerId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("startDate")
                        .HasColumnType("date");

                    b.HasKey("BannerId");

                    b.HasIndex("ClientId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("mvcTest.Models.Category", b =>
                {
                    b.Property<int>("CategorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categorId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryEname")
                        .IsRequired()
                        .HasColumnName("CategoryEName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CategoryPhoto")
                        .IsRequired()
                        .HasColumnName("categoryPhoto")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("CategorId");

                    b.ToTable("category","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Macaddress")
                        .IsRequired()
                        .HasColumnName("MACaddress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("realName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnName("registerationDate")
                        .HasColumnType("date");

                    b.HasKey("ClientId");

                    b.ToTable("client","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.ClientPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("paymentDate")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Reciept")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PaymentId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPayment");
                });

            modelBuilder.Entity("mvcTest.Models.Datacollector", b =>
                {
                    b.Property<int>("Dcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DCID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddinfDate")
                        .HasColumnName("addinfDate")
                        .HasColumnType("date");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("int");

                    b.Property<string>("Macaddress")
                        .IsRequired()
                        .HasColumnName("MACAddress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("userName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnName("zone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Dcid");

                    b.ToTable("datacollector","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Datacollectorshop", b =>
                {
                    b.Property<int>("Dcsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DCSId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddingDate")
                        .HasColumnName("addingDate")
                        .HasColumnType("date");

                    b.Property<int>("Dcid")
                        .HasColumnName("DCId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Macaddress")
                        .IsRequired()
                        .HasColumnName("MACAddress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Dcsid");

                    b.HasIndex("Dcid");

                    b.HasIndex("ShopId");

                    b.ToTable("datacollectorshop","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Dcpayment", b =>
                {
                    b.Property<int>("DcpaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DCPaymentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Dcid")
                        .HasColumnName("DCID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("RecNum")
                        .HasColumnName("recNum")
                        .HasColumnType("int");

                    b.HasKey("DcpaymentId");

                    b.HasIndex("Dcid");

                    b.ToTable("dcpayment","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Itemstosale", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aname")
                        .IsRequired()
                        .HasColumnName("AName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Ename")
                        .IsRequired()
                        .HasColumnName("EName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ItemId");

                    b.HasIndex("CategoryId")
                        .HasName("CategoryId");

                    b.ToTable("itemstosale","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Joboffer", b =>
                {
                    b.Property<int>("JobOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("jobOfferId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("clientId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnName("days")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnName("offerDate")
                        .HasColumnType("date");

                    b.Property<string>("OfferText")
                        .IsRequired()
                        .HasColumnName("offerText")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OfferTitle")
                        .IsRequired()
                        .HasColumnName("offerTitle")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("JobOfferId");

                    b.HasIndex("ClientId")
                        .HasName("clientId");

                    b.ToTable("joboffer","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Jobrequest", b =>
                {
                    b.Property<int>("JobRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("clientId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnName("days")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("requestDate")
                        .HasColumnType("date");

                    b.Property<string>("RequestText")
                        .IsRequired()
                        .HasColumnName("requestText")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasColumnName("requestTitle")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("JobRequestId");

                    b.HasIndex("ClientId")
                        .HasName("clientId");

                    b.ToTable("jobrequest","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Logs", b =>
                {
                    b.Property<int>("LogsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("date");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("LogsId");

                    b.HasIndex("ClientId")
                        .HasName("ClientId");

                    b.ToTable("logs","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnName("activationDate")
                        .HasColumnType("date");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnName("offerDate")
                        .HasColumnType("date");

                    b.Property<string>("OfferText")
                        .IsRequired()
                        .HasColumnName("offerText")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OfferTitle")
                        .IsRequired()
                        .HasColumnName("offerTitle")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ShopId")
                        .HasColumnName("shopId")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShopId")
                        .HasName("shopId");

                    b.ToTable("offer","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Referencepoint", b =>
                {
                    b.Property<int>("ReferencePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("referencePointId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnName("aName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnName("eName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ReferencePointId");

                    b.ToTable("referencepoint","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Saleoffer", b =>
                {
                    b.Property<int>("Soid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SOId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<string>("OfferText")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OfferTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Soid");

                    b.HasIndex("ClientId")
                        .HasName("UserId");

                    b.ToTable("saleoffer","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("date");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EshopName")
                        .IsRequired()
                        .HasColumnName("EShopName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnName("facebook")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnName("mobile")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnName("notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnName("properties")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("ReferencePointId")
                        .HasColumnName("referencePointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnName("registerationDate")
                        .HasColumnType("date");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ShopTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Twiter")
                        .IsRequired()
                        .HasColumnName("twiter")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnName("website")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("ShopId");

                    b.HasIndex("ReferencePointId")
                        .HasName("referencePointId");

                    b.HasIndex("ShopTypeId")
                        .HasName("ShopTypeId");

                    b.ToTable("shop","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Shopitem", b =>
                {
                    b.Property<int>("ShopItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnName("itemId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("ShopItemId");

                    b.HasIndex("ItemId")
                        .HasName("itemId");

                    b.HasIndex("ShopId")
                        .HasName("ShopItemID");

                    b.ToTable("shopitem","yourdir");
                });

            modelBuilder.Entity("mvcTest.Models.Shoptype", b =>
                {
                    b.Property<int>("ShopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnName("aliases")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Aname")
                        .IsRequired()
                        .HasColumnName("AName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("Ealiases")
                        .IsRequired()
                        .HasColumnName("ealiases")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Ename")
                        .HasColumnName("EName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("ShopTypeId");

                    b.HasIndex("CategoryId")
                        .HasName("categoryId");

                    b.ToTable("shoptype","yourdir");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Activationtable", b =>
                {
                    b.HasOne("mvcTest.Models.Shop", "Shop")
                        .WithMany("Activationtable")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_activationtable_shop")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Banner", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Banner")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Banner_client")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.ClientPayment", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("ClientPayment")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientPayment_client");
                });

            modelBuilder.Entity("mvcTest.Models.Datacollectorshop", b =>
                {
                    b.HasOne("mvcTest.Models.Datacollector", "Dc")
                        .WithMany("Datacollectorshop")
                        .HasForeignKey("Dcid")
                        .HasConstraintName("FK_datacollectorshop_datacollector")
                        .IsRequired();

                    b.HasOne("mvcTest.Models.Shop", "Shop")
                        .WithMany("Datacollectorshop")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_datacollectorshop_shop")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Dcpayment", b =>
                {
                    b.HasOne("mvcTest.Models.Datacollector", "Dc")
                        .WithMany("Dcpayment")
                        .HasForeignKey("Dcid")
                        .HasConstraintName("FK_dcpayment_datacollector")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Itemstosale", b =>
                {
                    b.HasOne("mvcTest.Models.Category", "Category")
                        .WithMany("Itemstosale")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_itemstosale_category")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Joboffer", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Joboffer")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_joboffer_client")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Jobrequest", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Jobrequest")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_jobrequest_client")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Logs", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Logs")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_logs_client")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Offer", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Offer")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_offer_client");

                    b.HasOne("mvcTest.Models.Shoptype", "Shop")
                        .WithMany("Offer")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_offer_shoptype")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Saleoffer", b =>
                {
                    b.HasOne("mvcTest.Models.Client", "Client")
                        .WithMany("Saleoffer")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_saleoffer_client")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Shop", b =>
                {
                    b.HasOne("mvcTest.Models.Referencepoint", "ReferencePoint")
                        .WithMany("Shop")
                        .HasForeignKey("ReferencePointId")
                        .HasConstraintName("FK_shop_referencepoint")
                        .IsRequired();

                    b.HasOne("mvcTest.Models.Shoptype", "ShopType")
                        .WithMany("Shop")
                        .HasForeignKey("ShopTypeId")
                        .HasConstraintName("FK_shop_shoptype")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Shopitem", b =>
                {
                    b.HasOne("mvcTest.Models.Itemstosale", "Item")
                        .WithMany("Shopitem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_shopitem_itemstosale")
                        .IsRequired();

                    b.HasOne("mvcTest.Models.Shop", "Shop")
                        .WithMany("Shopitem")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_shopitem_shop")
                        .IsRequired();
                });

            modelBuilder.Entity("mvcTest.Models.Shoptype", b =>
                {
                    b.HasOne("mvcTest.Models.Category", "Category")
                        .WithMany("Shoptype")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_shoptype_category");
                });
#pragma warning restore 612, 618
        }
    }
}
